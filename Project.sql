DECLARE 
PROCEDURE INSERT_ARTIST(A_ID NUMBER, 
 A_NAME VARCHAR2
, A_COUNTRY VARCHAR2
, A_DOB DATE) AS
BEGIN
INSERT INTO ARTIST VALUES(A_ID,A_NAME,A_COUNTRY,A_DOB);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS FOR ARTIST');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('SQLERRM');
END;
BEGIN
INSERT_ARTIST(:A_ID,:A_NAME,:A_COUNTRY,:A_DOB);
DBMS_OUTPUT.PUT_LINE('NUMBER OF ARTIST ADDED ' || SQL%ROWCOUNT);
END;
/


DECLARE 
PROCEDURE INSERT_ALBUM(A_ID NUMBER, 
 A_NAME VARCHAR2
, A_RATING NUMBER
, A_RELEASE DATE) AS
BEGIN
INSERT INTO ALBUM VALUES(A_ID,A_NAME,A_RATING,A_RELEASE);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS FOR ALBUM');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('AN ERROR HAS OCCURED WHILE INSERTING!!');
END;
BEGIN
INSERT_ALBUM(:A_ID,:A_NAME,:A_RATING,:A_RELEASE);
DBMS_OUTPUT.PUT_LINE('NUMBER OF ALBUM ADDED ' || SQL%ROWCOUNT);
END;
/



DECLARE 
PROCEDURE INSERT_TRACK(
  T_NAME VARCHAR2
, T_ID NUMBER
, T_RATING NUMBER
, T_LYRICS CLOB
, T_GENRE VARCHAR2
, T_RELEASE DATE
, A_ID NUMBER
, T_MIN NUMBER
, T_SEC NUMBER) AS
BEGIN
INSERT INTO TRACK VALUES(T_NAME,T_ID,T_RATING,T_LYRICS,T_GENRE,T_RELEASE,A_ID,T_MIN,T_SEC);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS FOR TRACK');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
BEGIN
INSERT_TRACK(:TRACK_NAME,:TRACK_ID,:TRACK_RATING,:TRACK_LYRICS,:TRACK_GENRE,:TRACK_RELEASE,:ALBUM_ID,:MINUTES,:SECONDS);
DBMS_OUTPUT.PUT_LINE('NUMBER OF TRACK ADDED ' || SQL%ROWCOUNT);
END;
/




DECLARE 
PROCEDURE INSERT_AWARD(
  A_ID NUMBER
, A_NAME VARCHAR2
) AS
BEGIN
INSERT INTO AWARD VALUES(A_ID,A_NAME);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS FOR AWARD');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('AN ERROR HAS OCCURED WHILE INSERTING!!');
END;
BEGIN
INSERT_AWARD(:AWARD_ID,:AWARD_NAME);
DBMS_OUTPUT.PUT_LINE('NUMBER OF AWARDS ADDED ' || SQL%ROWCOUNT);
END;

/


DECLARE 
PROCEDURE INSERT_RECEIVED_BY(
  A_ID NUMBER 
, AW_ID NUMBER
, T_ID NUMBER
, YEAR NUMBER) AS
BEGIN
INSERT INTO RECEIVED_BY VALUES(A_ID,AW_ID,T_ID,YEAR);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS.');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('SQLERRM');
END;
BEGIN
INSERT_RECEIVED_BY(:ARTIST_ID,:AWARD_ID,:TRACK_ID,:YEAR);
DBMS_OUTPUT.PUT_LINE('NUMBER OF ENTRIES ADDED ' || SQL%ROWCOUNT);
END;


/



DECLARE 
PROCEDURE INSERT_CREATES_A(
  A_ID NUMBER
, AL_ID NUMBER
) AS
BEGIN
INSERT INTO CREATES_A VALUES(A_ID,AL_ID);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS.');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('SQLERRM');
END;
BEGIN
INSERT_CREATES_A(:ARTIST_ID,:ALBUM_ID);
DBMS_OUTPUT.PUT_LINE('NUMBER OF ENTRIES ADDED ' || SQL%ROWCOUNT);
END;

/


DECLARE 
PROCEDURE INSERT_CREATES_T(
  A_ID NUMBER
, T_ID NUMBER
) AS
BEGIN
INSERT INTO CREATES_T VALUES(A_ID,T_ID);
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING DUPLICATE DETAILS.');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
BEGIN
INSERT_CREATES_T(:ARTIST_ID,:T_ID);
DBMS_OUTPUT.PUT_LINE('NUMBER OF ENTRIES ADDED ' || SQL%ROWCOUNT);
END;

/
















--------------------------------------------------------------------------------




--DELETION OF DATA


DECLARE 
    ERROR_ON_DELETE EXCEPTION;
    PROCEDURE DELETE_DATA(
    A NUMBER
    )
    AS
    BEGIN
    DELETE FROM ARTIST WHERE ARTIST_ID=A;
    DBMS_OUTPUT.PUT_LINE('NO OF ENTRIES DELETED: '||SQL%ROWCOUNT);
    IF
    SQL%ROWCOUNT = 0
    THEN RAISE ERROR_ON_DELETE;
    END IF;
    
    EXCEPTION
    WHEN ERROR_ON_DELETE THEN
        DBMS_OUTPUT.PUT_LINE('THIS RECORD IS NOT AVAILABLE IN DATABASE');
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('THAT IS  AN ERROR');
         DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;
BEGIN
    DELETE_DATA(:ARTIST_ID);
END;

/


DECLARE 
    ERROR_ON_DELETE EXCEPTION;
    PROCEDURE DELETE_DATA(
    A NUMBER
    )
    AS
    BEGIN
    DELETE FROM ALBUM WHERE ALBUM_ID=A;
    DBMS_OUTPUT.PUT_LINE('NO OF ENTRIES DELETED: '||SQL%ROWCOUNT);
    IF
    SQL%ROWCOUNT = 0
    THEN RAISE ERROR_ON_DELETE;
    END IF;
    
    EXCEPTION
    WHEN ERROR_ON_DELETE THEN
        DBMS_OUTPUT.PUT_LINE('THIS RECORD IS NOT AVAILABLE IN DATABASE');
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('THAT IS  AN ERROR');
         DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;
BEGIN
    DELETE_DATA(:ALBUM_ID);
END;
/


DECLARE 
    ERROR_ON_DELETE EXCEPTION;
    PROCEDURE DELETE_DATA(
    A NUMBER
    )
    AS
    BEGIN
    DELETE FROM TRACK WHERE TRACK_ID=A;
    DBMS_OUTPUT.PUT_LINE('NO OF ENTRIES DELETED: '||SQL%ROWCOUNT);
    IF
    SQL%ROWCOUNT = 0
    THEN RAISE ERROR_ON_DELETE;
    END IF;
    
    EXCEPTION
    WHEN ERROR_ON_DELETE THEN
        DBMS_OUTPUT.PUT_LINE('THIS RECORD IS NOT AVAILABLE IN DATABASE');
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('THAT IS  AN ERROR');
         DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;
BEGIN
    DELETE_DATA(:TRACK_ID);
END;
/



DECLARE 
    ERROR_ON_DELETE EXCEPTION;
    PROCEDURE DELETE_DATA(
      A NUMBER
    , B NUMBER
    , C NUMBER
    )
    AS
    BEGIN
    DELETE FROM RECEIVED_BY WHERE ARTIST_ID=A AND AWARD_ID=B AND TRACK_ID=C;
    DBMS_OUTPUT.PUT_LINE('NO OF ENTRIES DELETED: '||SQL%ROWCOUNT);
    END;
BEGIN
    DELETE_DATA(:ARTIST_ID,:AWARD_ID,:TRACK_ID);
END;
/


DECLARE 
    ERROR_ON_DELETE EXCEPTION;
    PROCEDURE DELETE_DATA(
      A NUMBER
    , B NUMBER
    )
    AS
    BEGIN
    DELETE FROM CREATES_A WHERE ARTIST_ID=A AND ALBUM_ID=B;
    DBMS_OUTPUT.PUT_LINE('NO OF ENTRIES DELETED: '||SQL%ROWCOUNT);
    IF
    SQL%ROWCOUNT = 0
    THEN RAISE ERROR_ON_DELETE;
    END IF;
    
    EXCEPTION
    WHEN ERROR_ON_DELETE THEN
        DBMS_OUTPUT.PUT_LINE('THIS RECORD IS NOT AVAILABLE IN DATABASE');
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('THAT IS  AN ERROR');
         DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;
BEGIN
    DELETE_DATA(:ARTIST_ID,:ALBUM_ID);
END;
/

DECLARE
    ERROR_ON_DELETE EXCEPTION;
    PROCEDURE DELETE_DATA(
      A NUMBER
    , B NUMBER
    )
    AS
    BEGIN
    DELETE FROM CREATES_T WHERE ARTIST_ID=A AND TRACK_ID=B;
    DBMS_OUTPUT.PUT_LINE('NO OF ENTRIES DELETED: '||SQL%ROWCOUNT);
    IF
    SQL%ROWCOUNT = 0
    THEN RAISE ERROR_ON_DELETE;
    END IF;
    
    EXCEPTION
    WHEN ERROR_ON_DELETE THEN
        DBMS_OUTPUT.PUT_LINE('THIS RECORD IS NOT AVAILABLE IN DATABASE');
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('THAT IS  AN ERROR');
         DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;
BEGIN
    DELETE_DATA(:ARTIST_ID,:TRACK_ID);
END;
/






--------------------------------------------------------------------------------





--CURSOR



DECLARE
    NOT_FOUND EXCEPTION;
    PROCEDURE retrive(id number) as 
    cursor C1 is select * from TRACK where  TRACK_ID = id;
    REC C1%rowtype;
    FOUND NUMBER:=0;
    begin
    open C1;
    loop
    fetch C1 into REC;
    exit when C1%notfound;
    FOUND:=1;
    dbms_output.put_line('TRACK NAME: ' || REC.TRACK_NAME ||'   RATING: '||REC.RATING_T ||'   DURATION: '||REC.MINUTES||':'||REC.SECONDS);
    dbms_output.put_line('RELEASE DATE: ' || REC.TRACK_RELEASE_DATE||'   GENRE: '||REC.GENRE);
    dbms_output.put_line('LYRICS: ');
    dbms_output.put_line(REC.LYRICS);
    end loop;
    close C1;
    IF FOUND <> 1 THEN
    RAISE NOT_FOUND;
    END IF;
    EXCEPTION 
    WHEN NOT_FOUND THEN
        dbms_output.put_line('NO RECORDS FOUND FOR THIS TRACK');
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
    end;

begin
retrive(:TRACK_ID);
END;
/


DECLARE
    NOT_FOUND EXCEPTION;
    FOUND NUMBER:=0;
    PROCEDURE retrive(id number) as 
    cursor C1 is select * from CREATES_A where  ARTIST_ID = id;
    REC C1%rowtype;
    ALB ALBUM%ROWTYPE;
    A_ID ARTIST.ARTIST_ID%TYPE;
    begin
    SELECT  DISTINCT ARTIST_ID INTO A_ID FROM RECEIVED_BY WHERE ARTIST_ID=id;
    dbms_output.put_line('ARTIST WHOSE ID IS '|| A_ID ||' HAS CREATED FOLLOWING ALBUMS' );
    open C1;
    
    loop
    fetch C1 into REC;
    exit when C1%notfound;
    FOUND :=1;
    SELECT * INTO ALB FROM ALBUM WHERE ALBUM_ID=REC.ALBUM_ID;    
    dbms_output.put_line('NAME: '||ALB.ALBUM_NAME||'   RATING: '||ALB.RATING_A||'  RELEASE DATE: '||ALB.ALBUM_RELEASE_DATE);
    
    end loop;
    close C1;
    IF FOUND <> 1 THEN
    RAISE NOT_FOUND;
    END IF;
    EXCEPTION 
    WHEN NOT_FOUND THEN
        dbms_output.put_line('NO RECORDS FOUND FOR THIS ARTIST');
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
    end;

begin
    retrive(:ARTIST_ID);
END;
/

DECLARE
    NOT_FOUND EXCEPTION;
    FOUND NUMBER:=0;
    PROCEDURE retrive(id number) as 
    cursor C1 is select * from CREATES_T where  ARTIST_ID = id;
    REC C1%rowtype;
    TRK TRACK%ROWTYPE;
    A_ID ARTIST.ARTIST_ID%TYPE;
    begin
    SELECT DISTINCT ARTIST_ID INTO A_ID FROM RECEIVED_BY WHERE ARTIST_ID=id;
    dbms_output.put_line('ARTIST WHOSE ID IS '|| A_ID ||' HAS CREATED FOLLOWING TRACKS' );
    open C1;
    
    loop
    fetch C1 into REC;
    exit when C1%notfound;
    FOUND :=1;
    SELECT * INTO TRK FROM TRACK WHERE TRACK_ID=REC.TRACK_ID;    
    dbms_output.put_line('NAME: '||TRK.TRACK_NAME||'   RATING: '||TRK.RATING_T||'  TRACK DATE: '||TRK.TRACK_ID);
    
    end loop;
    close C1;
    IF FOUND <> 1 THEN
    RAISE NOT_FOUND;
    END IF;
    EXCEPTION 
    WHEN NOT_FOUND THEN
        dbms_output.put_line('NO RECORDS FOUND FOR THIS ARTIST');
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
    end;

begin
    retrive(:ARTIST_ID);
END;

/

DECLARE
    NOT_FOUND EXCEPTION;
    FOUND NUMBER:=0;
    PROCEDURE retrive(id number) as 
    cursor C1 is select * from RECEIVED_BY where  ARTIST_ID = id;
    REC C1%rowtype;
    AWD AWARD%ROWTYPE;
    A_ID ARTIST.ARTIST_ID%TYPE;
	TRK TRACK.TRACK_NAME%TYPE;
    begin
    SELECT  DISTINCT ARTIST_ID INTO A_ID FROM RECEIVED_BY WHERE ARTIST_ID=id;
    dbms_output.put_line('ARTIST WHOSE ID IS '|| A_ID ||' HAS WON FOLLOWING AWARDS' );
    open C1;
    
    loop
    fetch C1 into REC;
    exit when C1%notfound;
    FOUND :=1;
    SELECT * INTO AWD FROM AWARD WHERE AWARD_ID=REC.AWARD_ID;  
	SELECT TRACK_NAME INTO TRK FROM TRACK WHERE TRACK_ID=REC.TRACK_ID;
    dbms_output.put_line('NAME: '||AWD.AWARD_NAME||'   FOR TRACK: '||TRK||'  YEAR: '||REC.YEAR);
    
    end loop;
    close C1;
    IF FOUND <> 1 THEN
    RAISE NOT_FOUND;
    END IF;
    EXCEPTION 
    WHEN NOT_FOUND THEN
        dbms_output.put_line('NO RECORDS FOUND FOR THIS ARTIST');
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
    end;

begin
    retrive(:ARTIST_ID);
END;
/







--------------------------------------------------------------------------------





--AGE CALCULATION
DECLARE
    AGE NUMBER;
    DOB DATE;
    FUNCTION AGE_CALC(DOB IN DATE) RETURN NUMBER IS 
    begin
    AGE:=(SYSDATE-DOB)/365;
    RETURN(AGE);
    end;

begin
AGE:=AGE_CALC(:DOB);
DBMS_OUTPUT.PUT_LINE('AGE IS ' || ROUND(AGE,0)||' YEARS '||ROUND(((AGE-ROUND(AGE,0))*365),0)||' DAYS');
END;



/
--------------------------------------------------------------------------------




--TRIGGERS
CREATE OR REPLACE TRIGGER ACE
AFTER INSERT OR DELETE OR UPDATE ON ARTIST
FOR EACH ROW
BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('INSERTING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('DELETING');
    ELSIF UPDATING THEN
       DBMS_OUTPUT.PUT_LINE('UPDATING');
    END IF;
END;

/
CREATE OR REPLACE TRIGGER AWARD
AFTER INSERT OR DELETE OR UPDATE ON AWARD
FOR EACH ROW
BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('INSERTING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('DELETING');
    ELSIF UPDATING THEN
       DBMS_OUTPUT.PUT_LINE('UPDATING');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER ALBUM
AFTER INSERT OR DELETE OR UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('INSERTING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('DELETING');
    ELSIF UPDATING THEN
       DBMS_OUTPUT.PUT_LINE('UPDATING');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRACK
AFTER INSERT OR DELETE OR UPDATE ON TRACK
FOR EACH ROW
BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('INSERTING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('DELETING');
    ELSIF UPDATING THEN
       DBMS_OUTPUT.PUT_LINE('UPDATING');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER R_B
AFTER INSERT OR DELETE OR UPDATE ON RECEIVED_BY
FOR EACH ROW
BEGIN
    IF INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('INSERTING');
    ELSIF DELETING THEN
      DBMS_OUTPUT.PUT_LINE('DELETING');
    ELSIF UPDATING THEN
       DBMS_OUTPUT.PUT_LINE('UPDATING');
    END IF;
END;
/
